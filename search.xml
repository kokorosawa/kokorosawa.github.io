<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>leetcode_576</title>
    <url>/2023/01/08/leetcode-576/</url>
    <content><![CDATA[<h1 id="576-out-of-boundary-paths"><a class="markdownIt-Anchor" href="#576-out-of-boundary-paths">#</a> 576. Out of Boundary Paths</h1>
<p>There is an  <code>m x n</code>  grid with a ball. The ball is initially at the position  <code>[startRow, startColumn]</code> . You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply <strong>at most</strong>  <code>maxMove</code>  moves to the ball.</p>
<p>Given the five integers  <code>m</code> ,  <code>n</code> ,  <code>maxMove</code> ,  <code>startRow</code> ,  <code>startColumn</code> , return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it <strong>modulo</strong>  <code>109 + 7</code> .</p>
<span id="more"></span>
<h1 id="example-1"><a class="markdownIt-Anchor" href="#example-1">#</a> <strong>Example 1:</strong></h1>
<p><img src="https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_1.png" alt="Untitled"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>
<h1 id="example-2"><a class="markdownIt-Anchor" href="#example-2">#</a> <strong>Example 2:</strong></h1>
<p><img src="https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_2.png" alt="Untitled"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1</span><br><span class="line">Output: 12</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= m, n &lt;= 50</code></li>
<li><code>0 &lt;= maxMove &lt;= 50</code></li>
<li><code>0 &lt;= startRow &lt; m</code></li>
<li><code>0 &lt;= startColumn &lt; n</code></li>
</ul>
<h1 id="my-solution"><a class="markdownIt-Anchor" href="#my-solution">#</a> My Solution :</h1>
<h2 id="一開始僅使用一般-dfs-來尋找突破邊界的路徑"><a class="markdownIt-Anchor" href="#一開始僅使用一般-dfs-來尋找突破邊界的路徑">#</a> 一開始僅使用一般 DFS 來尋找突破邊界的路徑</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> maxMove, <span class="type">int</span> startRow, <span class="type">int</span> startColumn)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(m, n, startRow, startColumn, maxMove);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> move)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row &gt; m - <span class="number">1</span> || col &gt; n - <span class="number">1</span> || row &lt; <span class="number">0</span> || col &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(move == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(m, n, row - <span class="number">1</span>, col, move - <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(m, n, row + <span class="number">1</span>, col, move - <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(m, n, row, col + <span class="number">1</span>, move - <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(m, n, row, col - <span class="number">1</span>, move - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>但在繳交後發現會 TLE，原因為，，第三個維度紀錄步數</p>
<p>所以利用三維陣列來記錄已已經搜索過的路徑，第三個維度紀錄走到當前座標的步數有幾個方法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> mp[<span class="number">51</span>][<span class="number">51</span>][<span class="number">51</span>];</span><br></pre></td></tr></table></figure>
<p>並利用 memset 來初始化陣列</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(mp, <span class="number">-1</span>, <span class="built_in">sizeof</span>(mp));</span><br><span class="line"><span class="comment">//     記憶體位址, 初始化值, 陣列大小</span></span><br></pre></td></tr></table></figure>
<h1 id="code"><a class="markdownIt-Anchor" href="#code">#</a> Code :</h1>
<hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> mp[<span class="number">51</span>][<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line">    <span class="type">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> maxMove, <span class="type">int</span> startRow, <span class="type">int</span> startColumn)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(mp, <span class="number">-1</span>, <span class="built_in">sizeof</span>(mp));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(m, n, startRow, startColumn, maxMove);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> move)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row &gt; m - <span class="number">1</span> || col &gt; n - <span class="number">1</span> || row &lt; <span class="number">0</span> || col &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(move == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(mp[row][col][move] != <span class="number">-1</span>) <span class="keyword">return</span> mp[row][col][move];</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> curr = <span class="number">0</span>;</span><br><span class="line">        curr += (<span class="built_in">dfs</span>(m, n, row - <span class="number">1</span>, col, move - <span class="number">1</span>) % M);</span><br><span class="line">        curr += (<span class="built_in">dfs</span>(m, n, row + <span class="number">1</span>, col, move - <span class="number">1</span>) % M);</span><br><span class="line">        curr += (<span class="built_in">dfs</span>(m, n, row, col + <span class="number">1</span>, move - <span class="number">1</span>) % M);</span><br><span class="line">        curr += (<span class="built_in">dfs</span>(m, n, row, col - <span class="number">1</span>, move - <span class="number">1</span>) % M);</span><br><span class="line">        curr %= M;</span><br><span class="line">        <span class="keyword">return</span> mp[row][col][move] = curr;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>記得在最後記錄在陣列中的值必須 % 1000000007，</p>
<p>因為在題目方形極大的情況下，可能的路徑會很多，並造成 int 溢位</p>
<h1 id="question"><a class="markdownIt-Anchor" href="#question">#</a> Question :</h1>
<hr>
<p>Q : 我們在不同的路徑會多次來到同一個坐標嗎？</p>
<p>A : 會</p>
<p>Q：如果來到同一個坐標，但步數不同，屬於同一個狀態嗎？</p>
<p>A：不屬於，很明顯步數不同時，它們接下來的路徑也會不同。</p>
<p>Q：步數相同，坐標相同時，接下來的路徑數量是否一致？</p>
<p>A：必定一致，且在 DFS 搜索過程中會多次遇到之前來過的坐標、步數相同的狀態</p>
<p>答案<a href="https://leetcode.cn/problems/out-of-boundary-paths/solution/576-chu-jie-de-lu-jing-shu-ji-yi-hua-sou-7sg4/">出處</a></p>
]]></content>
  </entry>
</search>
